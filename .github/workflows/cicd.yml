name: Deploy alma-nilokheri

on:
  push:
    branches:
      - master

jobs:
  frontend:
    runs-on: ubuntu-latest
    environment: frontend
    env:
      REACT_APP_API_KEY: ${{ vars.REACT_APP_API_KEY }}
      REACT_APP_PRIVET_KEY: ${{ vars.REACT_APP_PRIVET_KEY }}
      REACT_APP_AWS_Access_key: ${{ vars.REACT_APP_AWS_ACCESS_KEY }}
      REACT_APP_AWS_secret_key: ${{ vars.REACT_APP_AWS_SECRET_KEY }}
      REACT_APP_AWS_S3_BUCKET: ${{ vars.REACT_APP_AWS_S3_BUCKET }}
      REACT_APP_AWS_REGION: ${{ vars.REACT_APP_AWS_REGION }}
      REACT_APP_apiKey: ${{ vars.REACT_APP_APIKEY }}
      REACT_APP_authDomain: ${{ vars.REACT_APP_AUTHDOMAIN }}
      REACT_APP_projectId: ${{ vars.REACT_APP_PROJECTID }}
      REACT_APP_storageBucket: ${{ vars.REACT_APP_STORAGEBUCKET }}
      REACT_APP_messagingSenderId: ${{ vars.REACT_APP_MESSAGINGSENDERID }}
      REACT_APP_appId: ${{ vars.REACT_APP_APPID }}
      REACT_APP_measurementId: ${{ vars.REACT_APP_MEASUREMENTID }}
      REACT_APP_TRACKING_ID: ${{ vars.REACT_APP_TRACKING_ID }}
      REACT_APP_Month: ${{ vars.REACT_APP_MONTH }}
      REACT_APP_Year: ${{ vars.REACT_APP_YEAR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js 18
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Make .env file for frontend
        run: |
          echo -e "REACT_APP_API_KEY=${REACT_APP_API_KEY} \n REACT_APP_PRIVET_KEY=${REACT_APP_PRIVET_KEY} \n REACT_APP_AWS_Access_key=${REACT_APP_AWS_Access_key} \n REACT_APP_AWS_secret_key=${REACT_APP_AWS_secret_key} \n REACT_APP_AWS_S3_BUCKET=${REACT_APP_AWS_S3_BUCKET} \n REACT_APP_AWS_REGION=${REACT_APP_AWS_REGION} \n REACT_APP_apiKey=${REACT_APP_apiKey} \n REACT_APP_authDomain=${REACT_APP_authDomain} \n REACT_APP_projectId=${REACT_APP_projectId} \n REACT_APP_storageBucket=${REACT_APP_storageBucket} \n REACT_APP_messagingSenderId=${REACT_APP_messagingSenderId} \n REACT_APP_appId=${REACT_APP_appId} \n REACT_APP_measurementId=${REACT_APP_measurementId} \n REACT_APP_TRACKING_ID=${REACT_APP_TRACKING_ID} \n REACT_APP_Month=${REACT_APP_Month} \n REACT_APP_Year=${REACT_APP_Year}" > ./client/.env

      - name: Read .env
        run: echo ./client/.env

      - name: Navigate to client directory and  Install dependencies and  Build React app
        run: |
          cd ./client
          npm install
          npm run build
        env:
          CI: false

      - name: Login to Docker Hub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_KEY}}

      - name: Build frontend Docker Image
        run: docker build -t vishu7im/almanilokheri-frontend ./client

      - name: Publish frontend image to Docker Hub
        run: docker push vishu7im/almanilokheri-frontend:latest

  backend:
    runs-on: ubuntu-latest
    environment: backend
    env:
      DATABASE_KEY: ${{ vars.DATABASE_KEY }}
      PrivetKey: ${{ vars.PRIVATEKEY }}
      SENDER_MAIL: ${{ vars.SENDER_MAIL }}
      MAIL_PWD: ${{ vars.MAIL_PWD }}
      AWS_Access_key: ${{ vars.AWS_ACCESS_KEY }}
      AWS_secret_key: ${{ vars.AWS_SECRET_KEY }}
      AWS_S3_BUCKET: ${{ vars.AWS_S3_BUCKET }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make .env file for Backend
        run: |
          echo -e "DATABASE_KEY=${DATABASE_KEY} \n PrivetKey=${PrivetKey} \n SENDER_MAIL=${SENDER_MAIL} \n MAIL_PWD=${MAIL_PWD} \n AWS_Access_key=${AWS_Access_key} \n AWS_secret_key=${AWS_secret_key} \n AWS_S3_BUCKET=${AWS_S3_BUCKET} \n AWS_REGION=${AWS_REGION}" > ./backend/.env

      - name: Read .env
        run: echo ./backend/.env

      - name: Login to Docker Hub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_KEY}}

      - name: Build Backend Docker Image
        run: docker build -t vishu7im/almanilokheri-backend ./backend

      - name: Publish Backend image to Docker Hub
        run: docker push vishu7im/almanilokheri-backend:latest

  deploy:
    runs-on: self-hosted
    needs:
      - backend
      - frontend
    steps:
      - name: Deploy to production
        run: |
         sudo docker-compose pull
         sudo docker-compose up -d
         sudo docker image prune -f

      - name: DONE
        run: echo "Deployment complete"
